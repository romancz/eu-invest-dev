<?xml version="1.0" encoding="UTF-8" ?>

<project name="My subsite" default="help">

    <!-- Import production database. -->
    <target name="import-prod-db" description="Import production database." depends="download-prod-db">
        <echo msg="Import production database." />
        <!-- Drop database, create if necessary and import the dump. -->
        <exec command="echo y | mysqladmin -h${drupal.db.host} -u${drupal.db.user} -p${drupal.db.password} drop ${drupal.db.name}" logoutput="true" />
        <exec command="mysqladmin -h${drupal.db.host} -u${drupal.db.user} -p${drupal.db.password} create ${drupal.db.name}" logoutput="true" />
        <exec command="mysql -h${drupal.db.host} -u${drupal.db.user} -p${drupal.db.password} ${drupal.db.name} &lt; tmp/${gunzipped.filename}" checkreturn="false" passthru="false" logoutput="true" />
        <!-- Rebuild Registry. -->
        <drush command="registry-rebuild" assume="yes" root="${platform.build.dir}" bin="${drush.bin}" verbose="${drush.verbose}">
            <param>--fire-bazooka</param>
        </drush>
        <!-- Update database. -->
        <drush command="updatedb" assume="yes" root="${platform.build.dir}" bin="${drush.bin}"></drush>
        <!-- Clear Caches. -->
        <drush command="cc" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
            <param>all</param>
        </drush>
    </target>

    <!-- Download the production database. -->
    <target name="download-prod-db" description="Download the production database." >
        <echo msg="Download the production database." />
        <!--Strips gz suffix. -->
        <php expression="substr('${project.database.filename}', 0, -3)" returnProperty="gunzipped.filename" level="debug"/>
        <if>
            <not>
                <!-- Check if we have a previously downloaded dump available. -->
                <available file="tmp/${gunzipped.filename}" type="file" property="gunzipped.project.db" />
            </not>
            <then>
                <!-- If not available, download and unzip the file. -->
                <phingcall target="wget-prod-db" />
                <exec command="gunzip tmp/${project.database.filename}" checkreturn="true" passthru="false" logoutput="true" />
            </then>
            <else>
                <!-- Inform user if file was already downloaded. -->
                <echo msg="File ${gunzipped.filename} already downloaded." />
                <echo msg="Proceeding to import." />
            </else>
        </if>
    </target>

    <!-- Target to actually fetch the database dump. -->
    <target name="wget-prod-db">
        <!--Generate .htaccess credential property if needed, empty if not. -->
        <if>
            <or>
                <equals arg1="${project.database.url.htaccess.username}" arg2="" />
                <equals arg1="${project.database.url.htaccess.password}" arg2="" />
            </or>
            <then>
                <!-- If username or password is not provided, empty the credential string. -->
                <property name="project.database.url.credentials"  value="" override="true" />
            </then>
            <else>
                <!-- If username or password is provided, build the credential string. -->
                <property name="project.database.url.credentials"  value="${project.database.url.htaccess.username}:${project.database.url.htaccess.password}@" override="true"  />
            </else>
        </if>
        <!-- Attempt to download the database dump. -->
        <exec command="wget ${project.database.url.scheme}://${project.database.url.credentials}${project.database.url}${project.database.filename}" dir="tmp" checkreturn="false" passthru="false" outputProperty="project.database.download" />
        <if>
            <!-- Upon success inform the user. -->
            <contains string="${project.database.download}" substring="200" />
            <then>
                <echo msg="Database successfully downloaded." />
            </then>
            <!-- When denied access, prompt the user for credentials and retry the download. -->
            <elseif>
                <contains string="${project.database.download}" substring="401" />
                <then>
                    <phingcall target="prompt-for-credentials-and-retry" />
                </then>
            </elseif>
            <!-- Otherwise we fail the build and display the download message. -->
            <else>
                <echo msg="Failed to download the database dump. Result of wget:" level="error" />
                <echo msg="${project.database.download}" level="error" />
                <fail />
            </else>
        </if>
    </target>

    <!-- Simple prompt for user credentials and recurse into wget-prod-db. -->
    <target name="prompt-for-credentials-and-retry">
        <propertyprompt propertyName="project.database.url.htaccess.username" promptText="Please enter your username." />
        <propertyprompt propertyName="project.database.url.htaccess.password" promptText="Please enter your password." />
        <phingcall target="wget-prod-db" />
    </target>

    <!-- Target to check if we have default settings, otherwise propose user to rebuild. -->
    <target name="check-for-default-settings-or-rebuild">
        <if>
            <not>
                <available file="${platform.build.settings.dir}/default.settings.php" type="file" property="platform.build.settings.dir.default.settings" />
            </not>
            <then>
                <!-- If we can not find default settings in the build settings folder, prompt to ask user to rebuild. -->
                <echo msg="No default settings detected at ${platform.build.settings.dir}/default.settings.php." level="warning" />
                <propertyprompt propertyName="platform-rebuild" defaultValue="no" promptText="Do you wish to rebuild? (y/n)" />
                <if>
                    <equals arg1="${platform-rebuild}" arg2="y" />
                    <then>
                        <phingcall target="build-dev" />
                    </then>
                    <else>
                        <!-- If user chooses not to rebuild we have no other choice to fail the build. -->
                        <echo msg="Can not re-generate settings, canceling clone task." level="error" />
                        <fail />
                    </else>
                </if>
            </then>
            <else>
                <!-- If we have found the default settings inform the user we will proceed with generation. -->
                <echo msg="Default settings found at ${platform.build.settings.dir}/default.settings.php." />
                <echo msg="Proceeding with re-generation of the settings.php." />
            </else>
        </if>
    </target>

    <!-- Regenerate the settings file with database credentials and development variables. -->
    <target name="regenerate-settings" description="Regenerate settings.php file." depends="check-for-default-settings-or-rebuild">
        <copy file="src/Drupal/generate-settings.php" tofile="tmp/generate-settings.php" overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <!-- Replace tokens in settings generation script. -->
                    <token key="drupal.db.type" value="${drupal.db.type}" />
                    <token key="drupal.db.name" value="${drupal.db.name}" />
                    <token key="drupal.db.user" value="${drupal.db.user}" />
                    <token key="drupal.db.password" value="${drupal.db.password}" />
                    <token key="drupal.db.host" value="${drupal.db.host}" />
                    <token key="drupal.db.port" value="${drupal.db.port}" />
                    <token key="error_level" value="${development.variables.error_level}" />
                    <token key="views_ui_show_sql_query" value="${development.variables.views_ui_show_sql_query}" />
                    <token key="views_ui_show_performance_statistics" value="${development.variables.views_ui_show_performance_statistics}" />
                    <token key="views_show_additional_queries" value="${development.variables.views_show_additional_queries}" />
                    <token key="stage_file_proxy_origin" value="${development.variables.stage_file_proxy_origin}" />
                    <token key="stage_file_proxy_origin_dir" value="${development.variables.stage_file_proxy_origin_dir}" />
                    <token key="stage_file_proxy_hotlink" value="${development.variables.stage_file_proxy_hotlink}" />
                    <token key="file_public_path" value="${platform.build.files.dir}" />
                    <token key="file_private_path" value="${platform.build.files.dir}/private_files" />
                    <token key="file_temporary_path" value="${platform.build.tmp.dir}" />
                </replacetokens>
            </filterchain>
        </copy>
        <!-- Execute setttings generation script. -->
        <drush command="php-script" root="${platform.build.dir}" bin="${drush.bin}" verbose="${drush.verbose}">
            <param>tmp/generate-settings.php</param>
        </drush>
        <!-- Setup the private files directory if needed. -->
        <phingcall target="setup-files-directory" />
    </target>

    <!-- Install a development version of the subsite with a production database. -->
    <target name="build-clone" description="Setup a clone of production." depends="download-prod-db, regenerate-settings, import-prod-db, enable-development-modules" />

</project>
